name: Tests
on:
  push:
    branches:
      - master
  pull_request:
  schedule:
    - cron: '0 0 * * 0'

jobs:
  django3-test:
    name: Django 3 - Python ${{ matrix.python-version }} - Django ${{ matrix.django-version }} - DRF ${{ matrix.drf-version }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9, '3.10', 3.11]
        django-version: [3.2.18]
        drf-version: [3.14]

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --extra test --extra djet --extra webauthn

      - name: Install Django version
        run: |
          if [ "${{ matrix.django-version }}" = "latest" ]; then
            uv add --upgrade "Django"  # Force upgrade to latest
          else
            # First try exact version, if it fails try to install the major.minor version
            echo "Installing Django ${{ matrix.django-version }}..."
            if ! uv add "Django==${{ matrix.django-version }}"; then
              echo "Exact version failed, trying to install the latest patch version..."
              MAJOR_MINOR=$(echo "${{ matrix.django-version }}" | cut -d. -f1,2)
              uv add "Django~=$MAJOR_MINOR.0"
            fi
          fi

      - name: Install DRF version
        run: uv add --upgrade "djangorestframework==${{ matrix.drf-version }}"

      - name: Show environment info
        run: |
          uv run python --version
          uv pip freeze | grep -E 'djangorestframework|Django'

      - name: Run tests
        run: make test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        continue-on-error: true
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  django4-test:
    name: Django 4 - Python ${{ matrix.python-version }} - Django ${{ matrix.django-version }} - DRF ${{ matrix.drf-version }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9, '3.10', 3.11]
        django-version: [4.0, 4.1, 4.2]
        drf-version: [3.14]
        include:
          # Test latest Django stable with newest Python versions
          - python-version: '3.10'
            django-version: "latest"
            drf-version: 3.14
          - python-version: 3.11
            django-version: "latest"
            drf-version: 3.14

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --extra test --extra djet --extra webauthn

      - name: Install Django version
        run: |
          if [ "${{ matrix.django-version }}" = "latest" ]; then
            uv add --upgrade "Django"  # Force upgrade to latest
          else
            # First try exact version, if it fails try to install the major.minor version
            echo "Installing Django ${{ matrix.django-version }}..."
            if ! uv add "Django==${{ matrix.django-version }}"; then
              echo "Exact version failed, trying to install the latest patch version..."
              MAJOR_MINOR=$(echo "${{ matrix.django-version }}" | cut -d. -f1,2)
              uv add "Django~=$MAJOR_MINOR.0"
            fi
          fi

      - name: Install DRF version
        run: uv add --upgrade "djangorestframework==${{ matrix.drf-version }}"

      - name: Show environment info
        run: |
          uv run python --version
          uv pip freeze | grep -E 'djangorestframework|Django'

      - name: Run tests
        run: make test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        continue-on-error: true
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  django5-test:
    name: Django 5 - Python ${{ matrix.python-version }} - Django ${{ matrix.django-version }} - DRF ${{ matrix.drf-version }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', 3.11, 3.12, 3.13]
        django-version: ["5.0.12", "5.1.6", "5.2.0"]
        drf-version: [3.14]
        include:
          # Test latest Django with newest Python
          - python-version: 3.12
            django-version: "latest"
            drf-version: 3.14
          - python-version: 3.13
            django-version: "latest"
            drf-version: 3.14

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --extra test --extra djet --extra webauthn

      - name: Install Django version
        run: |
          if [ "${{ matrix.django-version }}" = "latest" ]; then
            uv add --upgrade "Django"  # Force upgrade to latest
          else
            # First try exact version, if it fails try to install the major.minor version
            echo "Installing Django ${{ matrix.django-version }}..."
            if ! uv add "Django==${{ matrix.django-version }}"; then
              echo "Exact version failed, trying to install the latest patch version..."
              MAJOR_MINOR=$(echo "${{ matrix.django-version }}" | cut -d. -f1,2)
              uv add "Django~=$MAJOR_MINOR.0"
            fi
          fi

      - name: Install DRF version
        run: uv add --upgrade "djangorestframework==${{ matrix.drf-version }}"

      - name: Show environment info
        run: |
          uv run python --version
          uv pip freeze | grep -E 'djangorestframework|Django'

      - name: Run tests
        run: make test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        continue-on-error: true
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  lock-file-check:
    name: Check uv.lock for changes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies to check uv.lock
        run: uv sync

      - name: Check if uv.lock is up to date
        run: uv lock --check
